#!/bin/bash
cat <<-EOF >/var/lib/coreos-vagrant/vagrantfile-user-data
#cloud-config
#
#   Author: Rohith
#   Date: 2015-06-04 13:14:14 +0100 (Thu, 04 Jun 2015)
#
#  vim:ts=2:sw=2:et
#

hostname: <%= @hostname %>.<%= @domain %>

resolv_conf:
  nameservers: [ '8.8.8.8', '8.8.4.4' ]
  searchdomains:
    - <%= @domain %>
  domain: <%= @domain %>
  options:
    rotate: true
    timeout: 1

write_files:
  - path: /run/public.key
    permission: 0444
    owner: root
    content: |
      <%= @public_key %>
  - path: /etc/confd/templates/hosts.cfg.tmpl
    permissions: 0444
    owner: root:root
    content: |
      # Generated by confd ----

      127.0.0.1 localhost.localdomain localhost
      ::1   localhost6.localdomain6 localhost6

      {{ range \$item := gets "/hosts/*" }}
      {{ \$item.Value }}    {{ \$item.Key | base }}{{ end }}

  - path: /etc/confd/conf.d/hosts.toml
    permissions: 0444
    owner: root:root
    content: |
      [template]
      src   = "hosts.cfg.tmpl"
      dest  = "/etc/hosts"
      owner = "root"
      group = "root"
      mode  = "0444"
      keys  = [
        "/hosts"
      ]
  - path: /run/hosts-etc.service
    permissions: 0440
    owner: root:root
    content: |
      [Unit]
      Description=Hosts Confd Service
      Requires=etcd.service
      After=etcd.service
      
      [Service]
      Restart=on-failure
      RestartSec=5

      ExecStartPre=/bin/chmod +x /opt/bin/confd
      ExecStart=/opt/bin/confd -backend=etcd -watch=true

      [X-Fleet]
      Global=true
coreos:
  etcd2:
    discovery: <%= @discovery %>
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  fleet:
    public-ip: \$private_ipv4
    metadata: cluster=dev,location=dev,host=<%= @hostname.gsub(/[0-9]*/,'') %>,<%= @fleet.map { |k,v| "#{k}=#{v}" }.join(',') %>
  flannel:
    interface: eth1
  update:
    reboot-strategy: off
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
      - name: 50-network-config.conf
        content: |
          [Unit]
          Requires=etcd.service
          After=etcd.service
          [Service]
          ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network" : "10.244.0.0/16", "Backend" : { "Type" : "vxlan" } }'
    <%- if ENV['DOCKER_MIRROR'] -%>
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://<%= ENV['DOCKER_MIRROR'] %>:5000'
    <%- end -%>
    - name: inject-ssh-key.service
      command: start
      content: |
        [Unit]
        Description=Injecting the public key

        # there is almost certainly a better way of doing this, but i can't be asked to google it
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/bash -c "/usr/bin/cat /run/public.key >> /home/core/.ssh/authorized_keys"
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ConditionFirstBoot=true
        ExecStartPre=/usr/sbin/wipefs -f /dev/sdb
        ExecStart=/usr/sbin/mkfs.ext4 /dev/sdb -N 3000000
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/sdb
        Where=/var/lib/docker
        Type=ext4
    <%- if @hostname =~ /^store/ -%>
    - name: format-storage.service
      command: start
      content: |
        [Unit]
        Description=Formats the Storage drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ConditionFirstBoot=true
        ExecStartPre=-/usr/sbin/wipefs /dev/sdc
        ExecStartPre=-/usr/sbin/mkfs.xfs /dev/sdc
        ExecStart=/bin/mkdir -p /var/lib/ceph
    - name: var-lib-ceph.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-storage.service
        After=format-storage.service
        [Mount]
        What=/dev/sdc
        Where=/var/lib/ceph
        Type=xfs
    <%- end -%>
    - name: install-confd.service
      command: start
      content: |
        [Unit]
        Description=Install the confd binary

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300

        ExecStartPre=-/usr/bin/mkdir -p /opt/bin /etc/confd/conf.d /etc/confd/templates
        ExecStartPre=-/bin/wget -N -q https://github.com/kelseyhightower/confd/releases/download/v0.9.0/confd-0.9.0-linux-amd64 -O /opt/bin/confd
        ExecStart=/bin/chmod +x /opt/bin/confd
    - name: host-presence.service
      command: start
      content: |
        [Unit]
        Description=Host Presence Container
        Requires=etcd.service
        Requires=fleet.service
        After=etcd.service
        After=fleet.service

        [Service]
        EnvironmentFile=/etc/environment
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=60
        ExecStart=/usr/bin/bash -c "while true; do /usr/bin/etcdctl set /hosts/%H \$COREOS_PRIVATE_IPV4 && exit 0 || sleep 2; done"
    - name: hosts-startup.service
      command: start
      content: |
        [Unit]
        Description=Hosts Service Startup
        Requires=fleet.service
        Requires=install-confd.service
        After=fleet.service
        After=install-confd.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300
        ExecStart=/usr/bin/bash -c "while true; do /usr/bin/fleetctl start /run/hosts-etc.service && exit 0 || sleep 2; done"
    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone

        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone UTC
        RemainAfterExit=yes
        Type=oneshot
    - name: install-kubernetes.service
      command: start
      content: |
        [Unit]
        Description=Install kubernetes binaries

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=300
        ExecStartPre=-/usr/bin/mkdir -p /opt/kubernetes/bin
        ExecStartPre=-/usr/bin/wget -N -q https://storage.googleapis.com/kubernetes-release/release/v0.20.2/bin/linux/amd64/hyperkube -O /opt/kubernetes/bin/hyperkube
        ExecStartPre=-/usr/bin/wget -N -q https://storage.googleapis.com/kubernetes-release/release/v0.20.2/bin/linux/amd64/kubectl -O /opt/kubernetes/bin/kubectl
        ExecStart=/bin/chmod +x /opt/kubernetes/bin/hyperkube /opt/kubernetes/bin/kubectl

EOF

/usr/bin/chmod 0644 /var/lib/coreos-vagrant/vagrantfile-user-data
