#!/usr/bin/ruby
#
#   Author: Rohith
#   Date: 2015-07-28 10:34:17 +0100 (Tue, 28 Jul 2015)
#
#  vim:ts=2:sw=2:et
#
require 'json'
require 'yaml'
require 'base64'
require 'optionscrapper'

module Kubernetes
  class Encoder
    def initialize
      begin
        # step: parse the command line
        parser.parse!
        # step: encode the manifest
        puts encode(load_manifest)
      rescue SystemExit => e
      rescue Exception => e
        parser.usage e.message
      end
    end

    def encode(manifest)
      # step: encode the entries
      raise ArgumentError, "the manifest does not have a resource type" unless manifest['kind']
      raise ArgumentError, "the manifest is not a secret resource type" unless manifest['kind'] == 'Secret'
      raise ArgumentError, "the manifest does not have any data resource" unless manifest['data']
      raise ArgumentError, "the manifest data type must be a hash/map" unless manifest['data'].is_a?(Hash)
      # step: iterate the data type
      manifest['data'].each_pair do |key, value|
        manifest['data'][key] = Base64.encode64(value)
      end
      # step: encode the content back to the input type
      content = ( options[:format] == :yaml ) ? manifest.to_yaml : manifest.to_json
    end

    private
    def load_manifest
      # step: load the content
      content = ( options[:manifest] ) ? load_file_manifest(options[:manifest]) : load_stdin_manifest
      # step: decode the content
      begin
        ( options[:format] == :yaml ) ? YAML.load(content) : JSON.parse(content)
      rescue Exception => e
        raise ArgumentError, "failed to decode the manifest, please check the syntax"
      end
    end

    def load_stdin_manifest
      $stdin.read
    end

    def load_file_manifest(filename)
      raise ArgumentError, "you have not specified a file to load" unless filename
      raise ArgumentError, "the file: #{filename} does not exist" unless File.exist?(filename)
      raise ArgumentError, "the file: #{filename} is not a regular file" unless File.file?(filename)
      raise ArgumentError, "the file: #{filename} is not readable" unless File.readable?(filename)
      File.read(filename)
    end

    def options
      @options ||= default_options
    end

    def default_options
      { :format => :yaml }
    end

    def parser
      @parser ||= OptionScrapper.new do |o|
        o.banner = "Usage: #{__FILE__} [-m|--manifest] FILENAME"
        o.on('-m MANIFEST', '--manifest MANIFEST', "the path / location of the manifest file, otherwise defaults to reading stdin") { |x| options[:manifest] = x }
        o.on('-j', '--json', 'the format of the manifest being processed is in json (defaults to yaml)') { options[:format] = :json }
      end
    end
  end
end

Kubernetes::Encoder.new
